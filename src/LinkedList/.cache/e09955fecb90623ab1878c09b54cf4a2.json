{"dependencies":[{"name":"./Node","loc":{"line":3,"column":21}}],"generated":{"js":"\"use strict\";\nexports.__esModule = true;\nvar Node_1 = require(\"./Node\");\nvar LinkedList = /** @class */ (function () {\n    function LinkedList() {\n        this.length = 0;\n        this.head = null;\n    }\n    LinkedList.prototype.append = function (element) {\n        var node = new Node_1[\"default\"](element);\n        var current;\n        // 列表为空时添加为第一个元素\n        if (this.head === null) {\n            this.head = node;\n        }\n        else {\n            current = this.head;\n            while (current.next) {\n                current = current.next;\n            }\n            current.next = node;\n        }\n        this.length += 1;\n    };\n    LinkedList.prototype.insert = function (position, element) {\n        if (position >= 0 && position <= this.length) {\n            var node = new Node_1[\"default\"](element);\n            var current = this.head;\n            var previous = void 0;\n            var index = 0;\n            // 当position为0 则在第一个位置添加新元素\n            if (position === 0) {\n                node.next = current;\n                this.head = node;\n            }\n            else {\n                while (index++ < position) {\n                    previous = current;\n                    current = current.next;\n                }\n                node.next = current;\n                previous.next = node;\n            }\n            this.length += 1;\n            return true;\n        }\n        else {\n            return false;\n        }\n    };\n    LinkedList.prototype.removeAt = function (position) {\n        if (position > -1 && position < this.length) {\n            var current = this.head;\n            var previous = void 0;\n            var index = 0;\n            // 移除第一项\n            if (position === 0) {\n                this.head = current.next;\n            }\n            else {\n                /**\n                 * 移除列表最后一项或中间某一项时, 需要依靠一个细节来迭代列表,直到到达目标位置\n                 * 使用一个内部递增的index变量, current变量为所循环列表的当前元素进行引用\n                 */\n                while (index++ < position) {\n                    previous = current;\n                    current = current.next;\n                }\n                previous.next = current.next;\n            }\n            this.length -= 1;\n            return current.element;\n        }\n        else {\n            return null;\n        }\n    };\n    LinkedList.prototype.toString = function () {\n        var current = this.head;\n        var string = '';\n        while (current) {\n            string += current.element.name + (current.next ? '\\n' : '');\n            current = current.next;\n        }\n        return string;\n    };\n    LinkedList.prototype.indexOf = function (element) {\n        var current = this.head;\n        var index = -1;\n        while (current) {\n            if (element === current.element) {\n                return index;\n            }\n            index += 1;\n            current = current.next;\n        }\n        return -1;\n    };\n    LinkedList.prototype.remove = function (element) {\n        var index = this.indexOf(element);\n        return this.removeAt(index);\n    };\n    LinkedList.prototype.isEmpty = function () {\n        return this.length === 0;\n    };\n    LinkedList.prototype.size = function () {\n        return this.length;\n    };\n    LinkedList.prototype.getHead = function () {\n        return this.head;\n    };\n    return LinkedList;\n}());\nvar linkedList = new LinkedList();\nlinkedList.append({ name: 'sakura' });\nlinkedList.append({ name: 'misaka' });\nlinkedList.append({ name: 'mikoto' });\nlinkedList.append({ name: 'yahaha' });\nconsole.log(linkedList);\n// const data = linkedList.removeAt(0);\nlinkedList.insert(2, { name: 'javascript' });\nconsole.log(linkedList);\nconsole.log(linkedList.toString());\n"},"hash":"b780066d8fb53b9c991fe055be3e8ce8"}